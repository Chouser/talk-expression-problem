public class PurchaseOrder {
  public id;
  public date;
  public amount;

  public PurchaseOrder(id, date, amount) {
    this.id = id;
    this.date = date;
    this.amount = amount;
  }

  public static getTestData() {
    data = new Vector();
    data.add(new PurchaseOrder(1,"2010-01-01",12.99));
    data.add(new PurchaseOrder(2,"2010-02-02",24.98));
    data.add(new PurchaseOrder(3,"2010-03-03",18.85));
    return data;
  }
}

public class InventoryItem {
  public description;
  public quantity;
  public cost;

  public InventoryItem(description, quantity, cost) {
    this.description = description;
    this.quantity = quantity;
    this.cost = cost;
  }

  public static getTestData() {
    data = new Vector();
    data.add(new InventoryItem("Widget", 28, 5.00));
    data.add(new InventoryItem("Gizmo",  32, 6.00));
    data.add(new InventoryItem("Thingy", 38, 0.98));
    return data;
  }
}


public class HtmlReport {
  public printReport(data) {
    System.println("<table>");
    // table header:
    System.println("  <tr>");
    for(columnName in data[0].getColumnNames()) {
      System.println("    <th>", columnName, "</th>");
    }
    System.println("  </tr>");

    // table body:
    for(row in data) {
      System.println("  <tr>");
      for(columnName in row.getColumnNames()) {
        System.println("    <td>", row.getValue(columnName), "</td>");
      }
      System.println("  </tr>");
    }
    System.println("</table>");
  }
}

//----

abstract class DataRow {
  public getColumnNames();
  public getValue(columnName);
}

public class PurchaseOrder implements DataRow {
  public id;
  public date;
  public amount;

  public PurchaseOrder(id, date, amount) {
    this.id = id;
    this.date = date;
    this.amount = amount;
  }

  public static getTestData() {
    data = new Vector();
    data.add(new PurchaseOrder(1, "2010-01-01", 12.99));
    data.add(new PurchaseOrder(2, "2010-02-02", 24.98));
    data.add(new PurchaseOrder(3, "2010-03-03", 18.85));
    return data;
  }

  // DataRow:
  public getColumnNames() {
    cols = new Vector();
    cols.add("id");
    cols.add("date");
    cols.add("amount");
    return cols;
  }

  public getValue(columnName) {
    if(columnName == "id") return this.id;
    else if(columnName == "date") return this.date;
    else if(columnName == "amount") return this.amount;
  }
}

public class InventoryItem implements DataRow {
  public description;
  public quantity;
  public cost;

  public InventoryItem(description, quantity, cost) {
    this.description = description;
    this.quantity = quantity;
    this.cost = cost;
  }

  public static getTestData() {
    data = new Vector();
    data.add(new InventoryItem("Widget", 28, 5.00));
    data.add(new InventoryItem("Gizmo",  32, 6.00));
    data.add(new InventoryItem("Thingy", 38, 0.98));
    return data;
  }

  // DataRow:
  public getColumnNames() {
    cols = new Vector();
    cols.add("description");
    cols.add("quantity");
    cols.add("unit cost");
    cols.add("total cost");
    return cols;
  }

  public getValue(columnName) {
    if(columnName == "description") return this.description;
    else if(columnName == "quantity") return this.quantity;
    else if(columnName == "cost") return this.cost;
    else if(columnName == "total cost")
      return this.cost * this.quantity;
  }
}


public class VectorTest {
  public static getTestData() {
    table = new Vector();
    row = new Vector();
    row.add(0); row.add(0); row.add(0); row.add(0); row.add(0); table.add(row);
    row = new Vector();
    row.add(1); row.add(2); row.add(3); row.add(4); row.add(5); table.add(row);
    row = new Vector();
    row.add(2); row.add(4); row.add(6); row.add(8); row.add(10);table.add(row);
    row = new Vector();
    row.add(3); row.add(6); row.add(9); row.add(12);row.add(15);table.add(row);
    return table;
  }
}

// solution #1: the adapter
// - issues: equality, deeply-nested objs, 
public class VectorDataRowAdapter implements DataRow {
  public vector;

  public VectorDataRowAdapter(vector) {
    this.vector = vector;
  }

  // DataRow:
  public getColumnNames() {
    cols = new Vector();
    for(i = 0; i < this.vector.count(); ++i) {
      cols.add(i);
    }
    return cols;
  }

  public getValue(columnName) {
    return this.vector[columnName];
  }

  // But now we either have to pre-process the whole table, or make another
  // adapter that creates wrapper instances on the fly:
  static public wrapTable(table) {
    out = new Vector();
    for(row = 0; row < table.count(); ++row) {
      out.add(new VectorDataRowAdapter(table[row]));
    }
    return out;
  }
}

// solution #2: monkey patching
patch class Vector implements DataRow {

  public getColumnNames() {
    cols = new Vector();
    for(i = 0; i < this.count(); ++i) {
      cols.add(i);
    }
    return cols;
  }

  public getValue(columnName) {
    return this[columnName];
  }
}
